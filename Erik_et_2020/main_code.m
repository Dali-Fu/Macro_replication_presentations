% Replication code for:
%   Paper:  Erik, Burcu, Marco J. Lombardi, Dubravko Mihaljek, and Hyun
%           Song Shin. 2020. The Dollar, Bank Leverage, and Real Economic
%           Activity: An Evolving Relationship. AEA Papers and Proceedings,
%           110: 529-34.
%   Link:   https://www.aeaweb.org/articles/pdf/doi/10.1257/pandp.20201097
%   DOI:    10.1257/pandp.20201097

clear; close all; clc; cd(pwd); tic

%% Figure 1: Total Assets and Book Equity of 17 US and 26 Euro Area Banks

t = readtable('data_figures_tables.xlsx','sheet','data_f1'); 
t.dates = datetime(t.Var1,'InputFormat','dd.MM.yyyy');
warning(['Please note that bank level data cannot be shared based on the agreement ' ...
    'with the data provider. Researchers can subscribe to the data through ' ...
    'contacting Datastream Worldscope (there is a cost). Aggregated data can ' ...
    'be found in ''data_figures_tables.xlsx'' sheet ''data_f1''.']);

figure()
subplot(1,2,1)
plot(t.dates,log(t.us_total_assets),'--',t.dates,log(t.us_book_equity));
legend({'Total assets','Book equity'},'Location','southoutside')
title('US')
ylabel('log, USD bn')

subplot(1,2,2)
plot(t.dates,log(t.ea_total_assets),'--',t.dates,log(t.ea_book_equity));
legend({'Total assets','Book equity'},'Location','southoutside')
title('EA')
ylabel('log, EUR bn')

sgtitle({'Figure 1. Total Assets and Book Equity of 17 US and','26 Euro Area Banks'});
saveas(gcf,'figure_1.png')


%% Figure 2: Leverage and VIX Index
clearvars; clc

% Take quarterly average of daily VIX data
vix = readtable('data_underlying.xlsx','sheet','data_f2_d'); 
vix.dates = datetime(vix.Var1,'InputFormat','dd/MM/yyyy');
vix.year = year(vix.dates);
vix.qrt = quarter(vix.dates);
vixQ = varfun(@mean,vix,'InputVariables','vix','GroupingVariables',{'year','qrt'});
% writematrix(vixQ.mean_vix,'data_figures_tables.xlsx','sheet','data_f2','range','D2');

% Data
% - Total_assets_brokers_dealers, equity_capital_brokers_dealers -> US flow
% of funds; VIX -> quarterly average of daily VIX data
t = readtable('data_figures_tables.xlsx','sheet','data_f2'); 
t.dates = datetime(t.Var1,'InputFormat','dd.MM.yyyy');
t.leverage = (t.total_assets_brokers_dealers ./ t.equity_capital_brokers_dealers);

% Periods
p1 = 1:57; % Q1 1995 - Q1 2009
p2 = 58:98; % Q2 2009 - Q2 2019

x1 = log(t.vix(p1));
y1 = t.leverage(p1);
x2 = log(t.vix(p2));
y2 = t.leverage(p2);

% Figure
figure()
subplot(1,2,1)
yyaxis right
plot(t.dates,t.leverage)
ylim([10 50])
ylabel('Ratio')

hold on
yyaxis left
plot(t.dates,log(t.vix),'--')
ylim([1 5])
ylabel({'Log scale'})
legend({'ln(VIX) (LHS)','Leverage (RHS)'},'Location','southoutside')

subplot(1,2,2)
scatter(x1,y1)
hold on 
scatter(x2,y2)
hold off
legend({'1995:I–2009:I','2009:II–2019:II'},'Location','southoutside')
ylabel('Leverage (ratio)')

sgtitle('Figure 2. Leverage and VIX Index');
saveas(gcf,'figure_2.png')


%% Figure 3: Deviation from Covered Interest Parity
clearvars; clc

t = readtable('data_figures_tables.xlsx','sheet','data_f3'); 
t.dates = datetime(t.Var1,'InputFormat','dd/MM/yyyy');
t.mean_cross_currency = mean(table2array(t(:,2:11)),2);

figure()
yyaxis right
plot(t.dates,t.mean_cross_currency,'--')
ylim([-40 40])
ylabel('Basis points')

hold on
yyaxis left
plot(t.dates,t.usd)
ylim([60 140])
ylabel('Jan 1997 = 100')
hold off
legend({'US dollar index (LHS)','Mean cross-currency basis spread (RHS)'},'Location','southoutside')

title('Figure 3. Deviation from Covered Interest Parity');
saveas(gcf,'figure_3.png')


%% Figures 4 & 5: Impulse Responses of Global PMIs (excluding the United States) (Figure 4) and Global Trade Growth (Figure 5) to Dollar Appreciation
clearvars; clc

% *** Preparing data

% Equity, USD: Monthly changes in monthly averages.
% - Monthly averages are generated by taking the average of daily data from
% 16th of the previous month up to 15th of the current month (period that
% is assumed to be taken into account by PMI survey respondents).
t = readtable('data_underlying.xlsx','sheet','data_f4_5_d');
t.dates = datetime(t.Var1,'InputFormat','dd/MM/yyyy');
t.year = year(t.dates);
t.month = month(t.dates);
t.day = day(t.dates);

years = unique(t.year);
months = unique(t.month);

dateM = cell(numel(months)*numel(years),1);
avgM = nan(numel(months)*numel(years),33);
row = 0;
for y = 1:numel(years)
    year = years(y);
    for m = 1:numel(months)
        month = months(m);
        
        row = row+1;
        dateM(row,1) = {datestr(datenum(strcat(num2str(month),'/',num2str(year)),'MM/yyyy'),'MM/yyyy')};
        
        select1 = t.year == year & t.month == month & t.day <=15;
        if m > 1
            select2 = t.year == year & t.month == month-1 & t.day >=16;
        elseif m == 1
            select2 = t.year == year-1 & t.month == 12 & t.day >=16;
        end
        select = select1 | select2;
        avgM(row,1:33) = mean(table2array(t(select,2:34)),'omitnan');
    end
end

nonNan = sum(isnan(avgM),2) ~= size(avgM,2);
avgM = avgM(nonNan,:);
dateM = dateM(nonNan,:);

t_month_delta_log = cell2table(num2cell(100.*diff(log(avgM))),'VariableNames',t.Properties.VariableNames(2:34));
t_month_delta_log.dates = datetime(dateM(2:end),'InputFormat','MM/yyyy');
t_month_delta_log = [t_month_delta_log(:,end) t_month_delta_log(:,1:end-1)];
t_month_delta_log = table2timetable(t_month_delta_log);
t_month_delta_log = t_month_delta_log(t_month_delta_log.dates >= {'01-Apr-1998'} & ...
    t_month_delta_log.dates <= {'01-Oct-2019'},:);

% Weights
t_weight = readtable('data_underlying.xlsx','sheet','data_f4_5_y');
t_weight.dates = datetime(t_weight.Var1,'InputFormat','yyyy');
t_weight.Var1 = [];
t_weight = table2timetable(t_weight);
t_weight = retime(t_weight,'monthly','previous');
t_weight = t_weight(t_weight.dates >= min(t_month_delta_log.dates) & ... 
    t_weight.dates <= max(t_month_delta_log.dates),:);

% - Check country alignment
assert(sum(strcmp(extractAfter(t_weight.Properties.VariableNames,'gdpppp'),...
extractAfter(t_month_delta_log(:,1:32).Properties.VariableNames,'eqtyPr'))) == 32)

% - Equity - weighted mean
equity = sum(table2array(t_weight) .* table2array(t_month_delta_log(:,1:32)),2,'omitnan') ./ ...
    sum(table2array(t_weight),2,'omitnan');

% - USD
usd = table2array(t_month_delta_log(:,33));

% PMI: Simple average of 31 economies, level minus 50.
warning(['Please note that PMI data at the country level cannot be shared based on the ' ...
    'agreement with the data provider. Researchers can subscribe to the data ' ...
    'through contacting IHS Markit (there is a cost). Aggregated data can be ' ...
    'found in ''data_figures_tables.xlsx'' sheet ''data_f4_5''.']);

% Trade: Year-on-year changes
t_trade = readtable('data_underlying.xlsx','sheet','data_f4_5_m');
t_trade.dates = datetime(t_trade.Var1,'InputFormat','dd/MM/yyyy');
t_trade = t_trade(t_trade.dates >= {'01-Apr-1997'} & t_trade.dates <= {'31-Oct-2019'},:);
trade = movsum(100*diff(log(t_trade.tradeIndex),1),12,'endpoints','discard');

% Export to excel
% writematrix(equity,'data_figures_tables.xlsx','sheet','data_f4_5','range','B2');
% writematrix(usd,'data_figures_tables.xlsx','sheet','data_f4_5','range','C2');
% writematrix(trade,'data_figures_tables.xlsx','sheet','data_f4_5','range','E2');

% *** VAR
% - run var_figures_4_5.prg in Eviews (using data in data_f4_5 sheet in data_figures_tables.xlsx)
c = actxserver('Eviews.Manager'); 
app = c.GetApplication;
app.Run(['run(v) "' pwd '\var_figures_4_5.prg"']);

% VAR output:
% 't_irf_six_pre_pmi.csv','t_irf_six_post_pmi.csv'

% *** Figure 4
clearvars; clc

files = {'t_irf_six_pre_pmi.csv','t_irf_six_post_pmi.csv'};
tables = replace(files,'.csv','');

for f = 1:numel(files)
    temp = readtable(files{f});
    eval([tables{f} ' = temp;']);
end

col_usd = 3;

%  Response of PMI:
row_mean = 105:2:151;
row_se = 106:2:152;

resp_pmi_to_usd_pre = str2double(table2cell(t_irf_six_pre_pmi(row_mean,col_usd)));
se_usd_pre = str2double(replace(replace(table2cell(t_irf_six_pre_pmi(row_se,col_usd)),')',''),'(',''));
resp_pmi_to_usd_ub_pre = resp_pmi_to_usd_pre + se_usd_pre;
resp_pmi_to_usd_lb_pre = resp_pmi_to_usd_pre - se_usd_pre;

resp_pmi_to_usd_post = str2double(table2cell(t_irf_six_post_pmi(row_mean,col_usd)));
se_usd_post = str2double(replace(replace(table2cell(t_irf_six_post_pmi(row_se,col_usd)),')',''),'(',''));
resp_pmi_to_usd_ub_post = resp_pmi_to_usd_post + se_usd_post;
resp_pmi_to_usd_lb_post = resp_pmi_to_usd_post - se_usd_post;

figure()
x = 1:24;
plot(x,resp_pmi_to_usd_pre,'b',x,resp_pmi_to_usd_ub_pre,'b--',x,resp_pmi_to_usd_lb_pre,'b--')
hold on
plot(x,resp_pmi_to_usd_post,'r',x,resp_pmi_to_usd_ub_post,'r--',x,resp_pmi_to_usd_lb_post,'r--')
hold off
legend({'Pre-GFC: Mean point estimate','+/- one standard error','','Post-GFC: Mean point estimate','+/- one standard error',''},'Location','southoutside')
ylabel('Percentage points')

title({'Figure 4. Impulse Responses of Global PMIs (excluding','the United States) to Dollar Appreciation'});
saveas(gcf,'figure_4.png')


% *** Figure 5
clearvars; clc

files = {'t_irf_six_pre_pmi.csv','t_irf_six_post_pmi.csv'};
tables = replace(files,'.csv','');

for f = 1:numel(files)
    temp = readtable(files{f});
    eval([tables{f} ' = temp;']);
end

col_usd = 3;

%  Response of Trade:
row_mean = 157:2:203;
row_se = 158:2:204;

resp_trade_to_usd_pre = str2double(table2cell(t_irf_six_pre_pmi(row_mean,col_usd)));
se_usd_pre = str2double(replace(replace(table2cell(t_irf_six_pre_pmi(row_se,col_usd)),')',''),'(',''));
resp_trade_to_usd_ub_pre = resp_trade_to_usd_pre + se_usd_pre;
resp_trade_to_usd_lb_pre = resp_trade_to_usd_pre - se_usd_pre;

resp_trade_to_usd_post = str2double(table2cell(t_irf_six_post_pmi(row_mean,col_usd)));
se_usd_post = str2double(replace(replace(table2cell(t_irf_six_post_pmi(row_se,col_usd)),')',''),'(',''));
resp_trade_to_usd_ub_post = resp_trade_to_usd_post + se_usd_post;
resp_trade_to_usd_lb_post = resp_trade_to_usd_post - se_usd_post;

figure()
x = 1:24;
plot(x,resp_trade_to_usd_pre,'b',x,resp_trade_to_usd_ub_pre,'b--',x,resp_trade_to_usd_lb_pre,'b--')
hold on
plot(x,resp_trade_to_usd_post,'r',x,resp_trade_to_usd_ub_post,'r--',x,resp_trade_to_usd_lb_post,'r--')
hold off
legend({'Pre-GFC: Mean point estimate','+/- one standard error','','Post-GFC: Mean point estimate','+/- one standard error',''},'Location','southoutside')
ylabel('Percentage points')

title({'Figure 5. Impulse Responses of Global Trade Growth';'to Dollar Appreciation'})
saveas(gcf,'figure_5.png')


%% Table 1: Nowcasting PMIs with the First Principal Component of Financial Variables
clearvars; clc

% *** Preparing data

% Equity, USD: Monthly changes in monthly averages.
% - Monthly averages are generated by taking the average of daily data from
% 16th of the previous month up to 15th of the current month (period that
% is assumed to be taken into account by PMI syrvey respondents).
t = readtable('data_underlying.xlsx','sheet','data_t1_d');
t.dates = datetime(t.Var1,'InputFormat','dd/MM/yyyy');
t.year = year(t.dates);
t.month = month(t.dates);
t.day = day(t.dates);

years = unique(t.year);
months = unique(t.month);

dateM = cell(numel(months)*numel(years),1);
avgM = nan(numel(months)*numel(years),33);
row = 0;
for y = 1:numel(years)
    year = years(y);
    for m = 1:numel(months)
        month = months(m);
        
        row = row+1;
        dateM(row,1) = {datestr(datenum(strcat(num2str(month),'/',num2str(year)),'MM/yyyy'),'MM/yyyy')};
        
        select1 = t.year == year & t.month == month & t.day <=15;
        if m > 1
            select2 = t.year == year & t.month == month-1 & t.day >=16;
        elseif m == 1
            select2 = t.year == year-1 & t.month == 12 & t.day >=16;
        end
        select = select1 | select2;
        avgM(row,1:41) = mean(table2array(t(select,2:42)),'omitnan');
    end
end

nonNan = sum(isnan(avgM),2) ~= size(avgM,2);
avgM = avgM(nonNan,:);
dateM = dateM(nonNan,:);

t_month_delta_log = cell2table(num2cell(100.*diff(log(avgM))),'VariableNames',t.Properties.VariableNames(2:42));
t_month_delta_log.dates = datetime(dateM(2:end),'InputFormat','MM/yyyy');
t_month_delta_log = [t_month_delta_log(:,end) t_month_delta_log(:,1:end-1)];
t_month_delta_log = table2timetable(t_month_delta_log);
t_month_delta_log = t_month_delta_log(t_month_delta_log.dates >= {'01-Feb-1998'} & ...
    t_month_delta_log.dates <= {'01-Oct-2019'},:);

% - USD
usd = table2array(t_month_delta_log(:,5));

% - Equity
equity_1_3 = table2array(t_month_delta_log(:,7:9));

% -- Equity - weighted mean
% Weights for equity
t_weight = readtable('data_underlying.xlsx','sheet','data_t1_y');
t_weight.dates = datetime(t_weight.Var1,'InputFormat','yyyy');
t_weight.Var1 = [];
t_weight = table2timetable(t_weight);
t_weight = retime(t_weight,'monthly','previous');
t_weight = t_weight(t_weight.dates >= min(t_month_delta_log.dates) & ... 
    t_weight.dates <= max(t_month_delta_log.dates),:);

% - Check country alignment
assert(sum(strcmp(extractAfter(t_weight.Properties.VariableNames,'gdpppp'),...
extractAfter(t_month_delta_log(:,10:41).Properties.VariableNames,'eqtyPr'))) == 32)

equity4 = sum(table2array(t_weight) .* table2array(t_month_delta_log(:,10:41)),2,'omitnan') ./ ...
    sum(table2array(t_weight),2,'omitnan');

equity = [equity_1_3 equity4];

% - VIX
vix = table2array(t_month_delta_log(:,6));

% - Spreads
spread = table2array(t_month_delta_log(:,1:4));

% PMI
warning(['Please note that global manufacturing PMI data cannot be shared based on ' ...
    'the agreement with the data provider. Researchers can subscribe to the ' ...
    'data through contacting IHS Markit (there is a cost).']);

% Export to excel
% writematrix(usd,'data_figures_tables.xlsx','sheet','data_t1','range','B2');
% writematrix(equity,'data_figures_tables.xlsx','sheet','data_t1','range','C2');
% writematrix(vix,'data_figures_tables.xlsx','sheet','data_t1','range','G2');
% writematrix(spread,'data_figures_tables.xlsx','sheet','data_t1','range','H2');

% *** Table
t = readtable('data_figures_tables.xlsx','sheet','data_t1'); 
t.dates = datetime(t.Var1,'InputFormat','yyyy-MM');

result_table = nan(4,3);
pvalue_table = nan(4,3);

% PC
cols = 2:11;
X = table2array(t(:,cols));
dropNan = sum(isnan(X),2) == 0;
X = X(dropNan,:); 
Xnorm = zscore(X);
[~,score,~,~,~,~] = pca(Xnorm);
t.pc = score(:,1);

warning(['To run the following lines (400-497), PMI data is needed, which ' ...
    'cannot be shared based on the agreement with the data provider. ' ...
    'Researchers can subscribe to the data through contacting IHS Markit ' ...
    '(there is a cost). Codes are provided for information.']);
%{
% == Full sample
% PMI only
y = t.pmi;
X = t.l1pmi;
assert(length(y) == length(X))
LM = fitlm(X,y,'linear');
denomRmse = LM.RMSE;

% PMI + PC
y = t.pmi;
X = [t.l1pmi t.pc];
assert(length(y) == length(X))
LM = fitlm(X,y,'linear');

% First column of the table
result_table(1,1) = LM.Coefficients.Estimate(2);
pvalue_table(1,1) = LM.Coefficients.pValue(2);

result_table(2,1) = LM.Coefficients.Estimate(3);
pvalue_table(2,1) = LM.Coefficients.pValue(3);

result_table(3,1) = LM.Rsquared.Ordinary;
result_table(4,1) = LM.RMSE/denomRmse;
tnew = LM.Coefficients.tStat(2) - sign(LM.Coefficients.tStat(2));
pnew = 2*(1-tcdf(abs(tnew),LM.DFE));
pvalue_table(4,1) = pnew;

% == Pre-GFC
pre = 1:119; % 1998/02-2007/12
% PMI only
y = t.pmi(pre);
X = t.l1pmi(pre);
assert(length(y) == length(X))
LM = fitlm(X,y,'linear');
denomRmse = LM.RMSE;

% PMI + PC
y = t.pmi(pre);
X = [t.l1pmi(pre) t.pc(pre)];
assert(length(y) == length(X))
LM = fitlm(X,y,'linear');

% Second column of the table
result_table(1,2) = LM.Coefficients.Estimate(2);
pvalue_table(1,2) = LM.Coefficients.pValue(2);

result_table(2,2) = LM.Coefficients.Estimate(3);
pvalue_table(2,2) = LM.Coefficients.pValue(3);

result_table(3,2) = LM.Rsquared.Ordinary;
result_table(4,2) = LM.RMSE/denomRmse ;
tnew = LM.Coefficients.tStat(2) - sign(LM.Coefficients.tStat(2));
pnew = 2*(1-tcdf(abs(tnew),LM.DFE));
pvalue_table(4,2) = pnew;

% == Post-GFC
post = 144:261; % 2010/01-2019/10
% PMI only
y = t.pmi(post);
X = t.l1pmi(post);
assert(length(y) == length(X))
LM = fitlm(X,y,'linear');
denomRmse = LM.RMSE;

% PMI + PC
y = t.pmi(post);
X = [t.l1pmi(post) t.pc(post)];
assert(length(y) == length(X))
LM = fitlm(X,y,'linear');

% Third column of the table
result_table(1,3) = LM.Coefficients.Estimate(2);
pvalue_table(1,3) = LM.Coefficients.pValue(2);

result_table(2,3) = LM.Coefficients.Estimate(3);
pvalue_table(2,3) = LM.Coefficients.pValue(3);

result_table(3,3) = LM.Rsquared.Ordinary;
result_table(4,3) = LM.RMSE/denomRmse;
tnew = LM.Coefficients.tStat(2) - sign(LM.Coefficients.tStat(2));
pnew = 2*(1-tcdf(abs(tnew),LM.DFE));
pvalue_table(4,3) = pnew;

% table in excel: 
file = 'table_1.xlsx';

rowheaders = {'PMI_t-1','dPC_t','R^2','RMSE'};
xlswrite(file,rowheaders','table_1','A2');

colheaders = {'Full_sample','Pre-GFC','Post-GFC'};
xlswrite(file,colheaders,'table_1','B1');

xlswrite(file,round(result_table,3),'table_1','B2');

xlswrite(file,{'p-values'},'table_1','F1');
xlswrite(file,round(pvalue_table,3),'table_1','G2');

winopen(file);
%}

%% Figure 6: Factor Loadings of the First Principal Component of Financial Variables
clearvars; clc

% Preparing data: Monthly changes in monthly averages. 
% - Monthly averages are generated by taking the average of daily data from
% 16th of the previous month up to 15th of the current month (period that
% is assumed to be taken into account by PMI survey respondents).
t = readtable('data_underlying.xlsx','sheet','data_f6_d');
t.dates = datetime(t.Var1,'InputFormat','dd/MM/yyyy');
t.year = year(t.dates);
t.month = month(t.dates);
t.day = day(t.dates);

years = unique(t.year);
months = unique(t.month);

dateM = cell(numel(months)*numel(years),1);
avgM = nan(numel(months)*numel(years),33);
row = 0;
for y = 1:numel(years)
    year = years(y);
    for m = 1:numel(months)
        month = months(m);
        
        row = row+1;
        dateM(row,1) = {datestr(datenum(strcat(num2str(month),'/',num2str(year)),'MM/yyyy'),'MM/yyyy')};
        
        select1 = t.year == year & t.month == month & t.day <=15;
        if m > 1
            select2 = t.year == year & t.month == month-1 & t.day >=16;
        elseif m == 1
            select2 = t.year == year-1 & t.month == 12 & t.day >=16;
        end
        select = select1 | select2;
        avgM(row,1:41) = mean(table2array(t(select,2:42)),'omitnan');
    end
end

nonNan = sum(isnan(avgM),2) ~= size(avgM,2);
avgM = avgM(nonNan,:);
dateM = dateM(nonNan,:);

t_month_delta_log = cell2table(num2cell(100.*diff(log(avgM))),'VariableNames',t.Properties.VariableNames(2:42));
t_month_delta_log.dates = datetime(dateM(2:end),'InputFormat','MM/yyyy');
t_month_delta_log = [t_month_delta_log(:,end) t_month_delta_log(:,1:end-1)];
t_month_delta_log = table2timetable(t_month_delta_log);
t_month_delta_log = t_month_delta_log(t_month_delta_log.dates >= {'01-Feb-1998'} & ...
    t_month_delta_log.dates <= {'01-Oct-2019'},:);
t_month_delta_log.dates = datetime(t_month_delta_log.dates,'Format','yyyy-MM');

% Equity - weighted mean
% - Weights
t_weight = readtable('data_underlying.xlsx','sheet','data_f6_y');
t_weight.dates = datetime(t_weight.Var1,'InputFormat','yyyy');
t_weight.Var1 = [];
t_weight = table2timetable(t_weight);
t_weight = retime(t_weight,'monthly','previous');
t_weight = t_weight(t_weight.dates >= min(t_month_delta_log.dates) & ... 
    t_weight.dates <= max(t_month_delta_log.dates),:);

% - Check country alignment
assert(sum(strcmp(extractAfter(t_weight.Properties.VariableNames,'gdpppp'),...
extractAfter(t_month_delta_log(:,10:41).Properties.VariableNames,'eqtyPr'))) == 32)

t_month_delta_log.equity4 = sum(table2array(t_weight) .* table2array(t_month_delta_log(:,10:41)),2,'omitnan') ./ ...
    sum(table2array(t_weight),2,'omitnan');

% Export to excel
t_data_f6 = t_month_delta_log(:,[1 5:9 42 4 3 2]); % order in the spider chart: spread1 usd vix equity1 equity2 equity3 equity4 spread4 spread3 spread2
% writetimetable(t_data_f6,'data_figures_tables.xlsx','sheet','data_f6');

% PCA
t = readtable('data_figures_tables.xlsx','sheet','data_f6'); 

pre = 1:119; % 1998/02 - 2007/12
post = 144:261; % 2010/01 - 2019/10
cols = 2:11;

% Pre-GFC
X = table2array(t(pre,cols));
dropNan = sum(isnan(X),2) == 0;
X = X(dropNan,:); 
Xnorm = zscore(X);
[loadingsPre,~,~,~,~,~] = pca(Xnorm);

% Post-GFC
X = table2array(t(post,cols));
dropNan = sum(isnan(X),2) == 0;
X = X(dropNan,:); 
Xnorm = zscore(X);
[loadingsPost,~,~,~,~,~] = pca(Xnorm);

% spider chart in excel: 
labels = t.Properties.VariableNames(cols);

file = 'figure_6_spider_chart.xlsx';
xlswrite(file,labels','spiderChart','A2');

xlswrite(file,{'Pre-GFC'},'spiderChart','B1');
xlswrite(file,abs(loadingsPre(:,1)),'spiderChart','B2');

xlswrite(file,{'Post-GFC'},'spiderChart','C1');
xlswrite(file,abs(loadingsPost(:,1)),'spiderChart','C2');

winopen(file);


%% Figure 7: Dollar-Denominated Credit to Emerging Market Economies and US Dollar Index
clearvars; clc

% USD: Year-on-year changes in quarterly averages.
t = readtable('data_underlying.xlsx','sheet','data_f7_d');
t.dates = datetime(t.Var1,'InputFormat','dd/MM/yyyy');
t.year = year(t.dates);
t.quarter = quarter(t.dates);

years = unique(t.year);
quarters = unique(t.quarter);

dateQ = cell(numel(quarters)*numel(years),1);
avgQ = nan(numel(quarters)*numel(years),1);
row = 0;
for y = 1:numel(years)
    year = years(y);
    for q = 1:numel(quarters)
        quarter = quarters(q);
        
        row = row+1;
        dateQ(row,1) = {datestr(datenum(strcat(num2str(quarter),'/',num2str(year)),'QQ/yyyy'),'QQ/yyyy')};
        
        select = t.year == year & t.quarter == quarter;
        avgQ(row,1) = mean(table2array(t(select,2)),'omitnan');
    end
end

nonNan = sum(isnan(avgQ),2) ~= size(avgQ,2);
avgQ = avgQ(nonNan,:);
dateQ = dateQ(nonNan,:);

t_quarter_delta_log = cell2table(num2cell(100.*movsum(diff(log(avgQ)),4,'endpoints','discard')),'VariableNames',t.Properties.VariableNames(2));
t_quarter_delta_log.dates = datetime(dateQ(5:end),'InputFormat','QQQ/yyyy');
t_quarter_delta_log = [t_quarter_delta_log(:,end) t_quarter_delta_log(:,1:end-1)];
t_quarter_delta_log = table2timetable(t_quarter_delta_log);
t_quarter_delta_log = t_quarter_delta_log(t_quarter_delta_log.dates >= {'01-Jan-2000'} & ...
    t_quarter_delta_log.dates <= {'01-Apr-2019'},:);

usd = table2array(t_quarter_delta_log(:,1));

% Export to excel
% writematrix(usd,'data_figures_tables.xlsx','sheet','data_f7','range','D2');

% Figure
t = readtable('data_figures_tables.xlsx','sheet','data_f7'); 
t.dates = datetime(t.Var1,'InputFormat','dd.MM.yyyy');

figure()
plot(t.dates,[t.total_credit t.loans t.usd])
legend({'Total credit','Loans','US dollar index'},'Location','southoutside')
ylabel('Yoy, percent')

title({'Figure 7.  Dollar-Denominated Credit to Emerging';'Market Economies and US Dollar Index'});
saveas(gcf,'figure_7.png')

toc % ~3 minutes / August 2020 / Matlab Release 2020a /  Toolboxes used: Statistics and Machine Learning Toolbox
% Last run on a 4-core Intel-based laptop with Microsoft Windows 10 Enterprise

